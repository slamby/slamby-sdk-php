<?php


/**
 * TagProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * TagProperties Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TagProperties implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    static $swaggerModelName = 'TagProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'path' => '\Swagger\Client\Model\PathItem[]',
        'level' => 'int',
        'is_leaf' => 'bool',
        'document_count' => 'int',
        'word_count' => 'int'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'path' => 'Path',
        'level' => 'Level',
        'is_leaf' => 'IsLeaf',
        'document_count' => 'DocumentCount',
        'word_count' => 'WordCount'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'path' => 'setPath',
        'level' => 'setLevel',
        'is_leaf' => 'setIsLeaf',
        'document_count' => 'setDocumentCount',
        'word_count' => 'setWordCount'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'path' => 'getPath',
        'level' => 'getLevel',
        'is_leaf' => 'getIsLeaf',
        'document_count' => 'getDocumentCount',
        'word_count' => 'getWordCount'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $path 
      * @var \Swagger\Client\Model\PathItem[]
      */
    protected $path;
    
    /**
      * $level 
      * @var int
      */
    protected $level;
    
    /**
      * $is_leaf 
      * @var bool
      */
    protected $is_leaf;
    
    /**
      * $document_count 
      * @var int
      */
    protected $document_count;
    
    /**
      * $word_count 
      * @var int
      */
    protected $word_count;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        

        if ($data != null) {
            $this->path = $data["path"];
            $this->level = $data["level"];
            $this->is_leaf = $data["is_leaf"];
            $this->document_count = $data["document_count"];
            $this->word_count = $data["word_count"];
        }
    }
    
    /**
     * Gets path
     * @return \Swagger\Client\Model\PathItem[]
     */
    public function getPath()
    {
        return $this->path;
    }
  
    /**
     * Sets path
     * @param \Swagger\Client\Model\PathItem[] $path 
     * @return $this
     */
    public function setPath($path)
    {
        
        $this->path = $path;
        return $this;
    }
    
    /**
     * Gets level
     * @return int
     */
    public function getLevel()
    {
        return $this->level;
    }
  
    /**
     * Sets level
     * @param int $level 
     * @return $this
     */
    public function setLevel($level)
    {
        
        $this->level = $level;
        return $this;
    }
    
    /**
     * Gets is_leaf
     * @return bool
     */
    public function getIsLeaf()
    {
        return $this->is_leaf;
    }
  
    /**
     * Sets is_leaf
     * @param bool $is_leaf 
     * @return $this
     */
    public function setIsLeaf($is_leaf)
    {
        
        $this->is_leaf = $is_leaf;
        return $this;
    }
    
    /**
     * Gets document_count
     * @return int
     */
    public function getDocumentCount()
    {
        return $this->document_count;
    }
  
    /**
     * Sets document_count
     * @param int $document_count 
     * @return $this
     */
    public function setDocumentCount($document_count)
    {
        
        $this->document_count = $document_count;
        return $this;
    }
    
    /**
     * Gets word_count
     * @return int
     */
    public function getWordCount()
    {
        return $this->word_count;
    }
  
    /**
     * Sets word_count
     * @param int $word_count 
     * @return $this
     */
    public function setWordCount($word_count)
    {
        
        $this->word_count = $word_count;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


