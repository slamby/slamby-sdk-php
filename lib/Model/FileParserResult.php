<?php


/**
 * FileParserResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * FileParserResult Class Doc Comment
 *
 * @category    Class
 * @description File Parser result object
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FileParserResult implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    static $swaggerModelName = 'FileParserResult';

    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'content' => 'string',
        'title' => 'string',
        'date' => 'string',
        'author' => 'string',
        'keywords' => 'string',
        'content_type' => 'string',
        'content_length' => 'int',
        'language' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'content' => 'Content',
        'title' => 'Title',
        'date' => 'Date',
        'author' => 'Author',
        'keywords' => 'Keywords',
        'content_type' => 'ContentType',
        'content_length' => 'ContentLength',
        'language' => 'Language'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'content' => 'setContent',
        'title' => 'setTitle',
        'date' => 'setDate',
        'author' => 'setAuthor',
        'keywords' => 'setKeywords',
        'content_type' => 'setContentType',
        'content_length' => 'setContentLength',
        'language' => 'setLanguage'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'content' => 'getContent',
        'title' => 'getTitle',
        'date' => 'getDate',
        'author' => 'getAuthor',
        'keywords' => 'getKeywords',
        'content_type' => 'getContentType',
        'content_length' => 'getContentLength',
        'language' => 'getLanguage'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $content The text content of sent document. Can be empty.
      * @var string
      */
    protected $content;
    
    /**
      * $title The title of the document. Can be null or empty.
      * @var string
      */
    protected $title;
    
    /**
      * $date 
      * @var string
      */
    protected $date;
    
    /**
      * $author The author of the document. Can be null or empty.
      * @var string
      */
    protected $author;
    
    /**
      * $keywords Keywords of the document. Can be null or empty.
      * @var string
      */
    protected $keywords;
    
    /**
      * $content_type The type of the document (e.g.: application/pdf). Can be empty.
      * @var string
      */
    protected $content_type;
    
    /**
      * $content_length The length of the received document.
      * @var int
      */
    protected $content_length;
    
    /**
      * $language Detected language of the document (e.g.: en). Can be empty.
      * @var string
      */
    protected $language;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        

        if ($data != null) {
            $this->content = $data["content"];
            $this->title = $data["title"];
            $this->date = $data["date"];
            $this->author = $data["author"];
            $this->keywords = $data["keywords"];
            $this->content_type = $data["content_type"];
            $this->content_length = $data["content_length"];
            $this->language = $data["language"];
        }
    }
    
    /**
     * Gets content
     * @return string
     */
    public function getContent()
    {
        return $this->content;
    }
  
    /**
     * Sets content
     * @param string $content The text content of sent document. Can be empty.
     * @return $this
     */
    public function setContent($content)
    {
        
        $this->content = $content;
        return $this;
    }
    
    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
  
    /**
     * Sets title
     * @param string $title The title of the document. Can be null or empty.
     * @return $this
     */
    public function setTitle($title)
    {
        
        $this->title = $title;
        return $this;
    }
    
    /**
     * Gets date
     * @return string
     */
    public function getDate()
    {
        return $this->date;
    }
  
    /**
     * Sets date
     * @param string $date 
     * @return $this
     */
    public function setDate($date)
    {
        
        $this->date = $date;
        return $this;
    }
    
    /**
     * Gets author
     * @return string
     */
    public function getAuthor()
    {
        return $this->author;
    }
  
    /**
     * Sets author
     * @param string $author The author of the document. Can be null or empty.
     * @return $this
     */
    public function setAuthor($author)
    {
        
        $this->author = $author;
        return $this;
    }
    
    /**
     * Gets keywords
     * @return string
     */
    public function getKeywords()
    {
        return $this->keywords;
    }
  
    /**
     * Sets keywords
     * @param string $keywords Keywords of the document. Can be null or empty.
     * @return $this
     */
    public function setKeywords($keywords)
    {
        
        $this->keywords = $keywords;
        return $this;
    }
    
    /**
     * Gets content_type
     * @return string
     */
    public function getContentType()
    {
        return $this->content_type;
    }
  
    /**
     * Sets content_type
     * @param string $content_type The type of the document (e.g.: application/pdf). Can be empty.
     * @return $this
     */
    public function setContentType($content_type)
    {
        
        $this->content_type = $content_type;
        return $this;
    }
    
    /**
     * Gets content_length
     * @return int
     */
    public function getContentLength()
    {
        return $this->content_length;
    }
  
    /**
     * Sets content_length
     * @param int $content_length The length of the received document.
     * @return $this
     */
    public function setContentLength($content_length)
    {
        
        $this->content_length = $content_length;
        return $this;
    }
    
    /**
     * Gets language
     * @return string
     */
    public function getLanguage()
    {
        return $this->language;
    }
  
    /**
     * Sets language
     * @param string $language Detected language of the document (e.g.: en). Can be empty.
     * @return $this
     */
    public function setLanguage($language)
    {
        
        $this->language = $language;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


