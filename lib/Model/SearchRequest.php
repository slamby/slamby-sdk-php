<?php


/**
 * SearchRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * SearchRequest Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SearchRequest implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    static $swaggerModelName = 'SearchRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'text' => 'string',
        'auto_complete_settings' => '\Swagger\Client\Model\AutoCompleteSettings',
        'search_settings' => '\Swagger\Client\Model\SearchSettings',
        'classifier_settings' => '\Swagger\Client\Model\ClassifierSettings'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'text' => 'Text',
        'auto_complete_settings' => 'AutoCompleteSettings',
        'search_settings' => 'SearchSettings',
        'classifier_settings' => 'ClassifierSettings'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'text' => 'setText',
        'auto_complete_settings' => 'setAutoCompleteSettings',
        'search_settings' => 'setSearchSettings',
        'classifier_settings' => 'setClassifierSettings'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'text' => 'getText',
        'auto_complete_settings' => 'getAutoCompleteSettings',
        'search_settings' => 'getSearchSettings',
        'classifier_settings' => 'getClassifierSettings'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $text A simple text or a Query String query, depends on the Type of the search
      * @var string
      */
    protected $text;
    
    /**
      * $auto_complete_settings You can override the activated AutoCompleteSettings during each search. Null means the activated settings will be used
      * @var \Swagger\Client\Model\AutoCompleteSettings
      */
    protected $auto_complete_settings;
    
    /**
      * $search_settings You can override the activated SearchSettings during each search. Null means the activated settings will be used
      * @var \Swagger\Client\Model\SearchSettings
      */
    protected $search_settings;
    
    /**
      * $classifier_settings You can override the activated ClassifierSettings during each search. Null means the activated settings will be used
      * @var \Swagger\Client\Model\ClassifierSettings
      */
    protected $classifier_settings;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        

        if ($data != null) {
            $this->text = $data["text"];
            $this->auto_complete_settings = $data["auto_complete_settings"];
            $this->search_settings = $data["search_settings"];
            $this->classifier_settings = $data["classifier_settings"];
        }
    }
    
    /**
     * Gets text
     * @return string
     */
    public function getText()
    {
        return $this->text;
    }
  
    /**
     * Sets text
     * @param string $text A simple text or a Query String query, depends on the Type of the search
     * @return $this
     */
    public function setText($text)
    {
        
        $this->text = $text;
        return $this;
    }
    
    /**
     * Gets auto_complete_settings
     * @return \Swagger\Client\Model\AutoCompleteSettings
     */
    public function getAutoCompleteSettings()
    {
        return $this->auto_complete_settings;
    }
  
    /**
     * Sets auto_complete_settings
     * @param \Swagger\Client\Model\AutoCompleteSettings $auto_complete_settings You can override the activated AutoCompleteSettings during each search. Null means the activated settings will be used
     * @return $this
     */
    public function setAutoCompleteSettings($auto_complete_settings)
    {
        
        $this->auto_complete_settings = $auto_complete_settings;
        return $this;
    }
    
    /**
     * Gets search_settings
     * @return \Swagger\Client\Model\SearchSettings
     */
    public function getSearchSettings()
    {
        return $this->search_settings;
    }
  
    /**
     * Sets search_settings
     * @param \Swagger\Client\Model\SearchSettings $search_settings You can override the activated SearchSettings during each search. Null means the activated settings will be used
     * @return $this
     */
    public function setSearchSettings($search_settings)
    {
        
        $this->search_settings = $search_settings;
        return $this;
    }
    
    /**
     * Gets classifier_settings
     * @return \Swagger\Client\Model\ClassifierSettings
     */
    public function getClassifierSettings()
    {
        return $this->classifier_settings;
    }
  
    /**
     * Sets classifier_settings
     * @param \Swagger\Client\Model\ClassifierSettings $classifier_settings You can override the activated ClassifierSettings during each search. Null means the activated settings will be used
     * @return $this
     */
    public function setClassifierSettings($classifier_settings)
    {
        
        $this->classifier_settings = $classifier_settings;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


