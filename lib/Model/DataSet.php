<?php


/**
 * DataSet
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * DataSet Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DataSet implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    static $swaggerModelName = 'DataSet';

    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'name' => 'string',
        'n_gram_count' => 'int',
        'id_field' => 'string',
        'tag_field' => 'string',
        'interpreted_fields' => 'string[]',
        'statistics' => '\Swagger\Client\Model\DataSetStats',
        'sample_document' => '\Swagger\Client\Model\Object'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'name' => 'Name',
        'n_gram_count' => 'NGramCount',
        'id_field' => 'IdField',
        'tag_field' => 'TagField',
        'interpreted_fields' => 'InterpretedFields',
        'statistics' => 'Statistics',
        'sample_document' => 'SampleDocument'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'name' => 'setName',
        'n_gram_count' => 'setNGramCount',
        'id_field' => 'setIdField',
        'tag_field' => 'setTagField',
        'interpreted_fields' => 'setInterpretedFields',
        'statistics' => 'setStatistics',
        'sample_document' => 'setSampleDocument'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'name' => 'getName',
        'n_gram_count' => 'getNGramCount',
        'id_field' => 'getIdField',
        'tag_field' => 'getTagField',
        'interpreted_fields' => 'getInterpretedFields',
        'statistics' => 'getStatistics',
        'sample_document' => 'getSampleDocument'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $name 
      * @var string
      */
    protected $name;
    
    /**
      * $n_gram_count 
      * @var int
      */
    protected $n_gram_count;
    
    /**
      * $id_field 
      * @var string
      */
    protected $id_field;
    
    /**
      * $tag_field 
      * @var string
      */
    protected $tag_field;
    
    /**
      * $interpreted_fields 
      * @var string[]
      */
    protected $interpreted_fields;
    
    /**
      * $statistics 
      * @var \Swagger\Client\Model\DataSetStats
      */
    protected $statistics;
    
    /**
      * $sample_document 
      * @var \Swagger\Client\Model\Object
      */
    protected $sample_document;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        

        if ($data != null) {
            $this->name = $data["name"];
            $this->n_gram_count = $data["n_gram_count"];
            $this->id_field = $data["id_field"];
            $this->tag_field = $data["tag_field"];
            $this->interpreted_fields = $data["interpreted_fields"];
            $this->statistics = $data["statistics"];
            $this->sample_document = $data["sample_document"];
        }
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets n_gram_count
     * @return int
     */
    public function getNGramCount()
    {
        return $this->n_gram_count;
    }
  
    /**
     * Sets n_gram_count
     * @param int $n_gram_count 
     * @return $this
     */
    public function setNGramCount($n_gram_count)
    {
        
        $this->n_gram_count = $n_gram_count;
        return $this;
    }
    
    /**
     * Gets id_field
     * @return string
     */
    public function getIdField()
    {
        return $this->id_field;
    }
  
    /**
     * Sets id_field
     * @param string $id_field 
     * @return $this
     */
    public function setIdField($id_field)
    {
        
        $this->id_field = $id_field;
        return $this;
    }
    
    /**
     * Gets tag_field
     * @return string
     */
    public function getTagField()
    {
        return $this->tag_field;
    }
  
    /**
     * Sets tag_field
     * @param string $tag_field 
     * @return $this
     */
    public function setTagField($tag_field)
    {
        
        $this->tag_field = $tag_field;
        return $this;
    }
    
    /**
     * Gets interpreted_fields
     * @return string[]
     */
    public function getInterpretedFields()
    {
        return $this->interpreted_fields;
    }
  
    /**
     * Sets interpreted_fields
     * @param string[] $interpreted_fields 
     * @return $this
     */
    public function setInterpretedFields($interpreted_fields)
    {
        
        $this->interpreted_fields = $interpreted_fields;
        return $this;
    }
    
    /**
     * Gets statistics
     * @return \Swagger\Client\Model\DataSetStats
     */
    public function getStatistics()
    {
        return $this->statistics;
    }
  
    /**
     * Sets statistics
     * @param \Swagger\Client\Model\DataSetStats $statistics 
     * @return $this
     */
    public function setStatistics($statistics)
    {
        
        $this->statistics = $statistics;
        return $this;
    }
    
    /**
     * Gets sample_document
     * @return \Swagger\Client\Model\Object
     */
    public function getSampleDocument()
    {
        return $this->sample_document;
    }
  
    /**
     * Sets sample_document
     * @param \Swagger\Client\Model\Object $sample_document 
     * @return $this
     */
    public function setSampleDocument($sample_document)
    {
        
        $this->sample_document = $sample_document;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


