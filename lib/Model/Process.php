<?php


/**
 * Process
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Process Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Process implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    static $swaggerModelName = 'Process';

    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'start' => '\DateTime',
        'end' => '\DateTime',
        'percent' => 'double',
        'description' => 'string',
        'status' => 'string',
        'type' => 'string',
        'error_messages' => 'string[]',
        'result_message' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'Id',
        'start' => 'Start',
        'end' => 'End',
        'percent' => 'Percent',
        'description' => 'Description',
        'status' => 'Status',
        'type' => 'Type',
        'error_messages' => 'ErrorMessages',
        'result_message' => 'ResultMessage'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'start' => 'setStart',
        'end' => 'setEnd',
        'percent' => 'setPercent',
        'description' => 'setDescription',
        'status' => 'setStatus',
        'type' => 'setType',
        'error_messages' => 'setErrorMessages',
        'result_message' => 'setResultMessage'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'start' => 'getStart',
        'end' => 'getEnd',
        'percent' => 'getPercent',
        'description' => 'getDescription',
        'status' => 'getStatus',
        'type' => 'getType',
        'error_messages' => 'getErrorMessages',
        'result_message' => 'getResultMessage'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id The process GUID identifier
      * @var string
      */
    protected $id;
    
    /**
      * $start The UTC time of the process start
      * @var \DateTime
      */
    protected $start;
    
    /**
      * $end The UTC time of the process end
      * @var \DateTime
      */
    protected $end;
    
    /**
      * $percent The percent of the whole process. (e.g.: 12.23 means 12.23%)
      * @var double
      */
    protected $percent;
    
    /**
      * $description Process description
      * @var string
      */
    protected $description;
    
    /**
      * $status InProgress - the process is in progress, it's working |\r\n            Cancelled - the process was cancelled by the user |\r\n            Finished - the process was finished successfully |\r\n            Error - the process stopped by an error, see the ErrorMessages for detailed information |\r\n            Interrupted - the process was interrupted by an unknown event (e.g.: server restart) - under development |\r\n            Paused - the process was paused  - under development
      * @var string
      */
    protected $status;
    
    /**
      * $type Type of the process
      * @var string
      */
    protected $type;
    
    /**
      * $error_messages 
      * @var string[]
      */
    protected $error_messages;
    
    /**
      * $result_message 
      * @var string
      */
    protected $result_message;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        

        if ($data != null) {
            $this->id = $data["id"];
            $this->start = $data["start"];
            $this->end = $data["end"];
            $this->percent = $data["percent"];
            $this->description = $data["description"];
            $this->status = $data["status"];
            $this->type = $data["type"];
            $this->error_messages = $data["error_messages"];
            $this->result_message = $data["result_message"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id The process GUID identifier
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets start
     * @return \DateTime
     */
    public function getStart()
    {
        return $this->start;
    }
  
    /**
     * Sets start
     * @param \DateTime $start The UTC time of the process start
     * @return $this
     */
    public function setStart($start)
    {
        
        $this->start = $start;
        return $this;
    }
    
    /**
     * Gets end
     * @return \DateTime
     */
    public function getEnd()
    {
        return $this->end;
    }
  
    /**
     * Sets end
     * @param \DateTime $end The UTC time of the process end
     * @return $this
     */
    public function setEnd($end)
    {
        
        $this->end = $end;
        return $this;
    }
    
    /**
     * Gets percent
     * @return double
     */
    public function getPercent()
    {
        return $this->percent;
    }
  
    /**
     * Sets percent
     * @param double $percent The percent of the whole process. (e.g.: 12.23 means 12.23%)
     * @return $this
     */
    public function setPercent($percent)
    {
        
        $this->percent = $percent;
        return $this;
    }
    
    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
  
    /**
     * Sets description
     * @param string $description Process description
     * @return $this
     */
    public function setDescription($description)
    {
        
        $this->description = $description;
        return $this;
    }
    
    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param string $status InProgress - the process is in progress, it's working |\r\n            Cancelled - the process was cancelled by the user |\r\n            Finished - the process was finished successfully |\r\n            Error - the process stopped by an error, see the ErrorMessages for detailed information |\r\n            Interrupted - the process was interrupted by an unknown event (e.g.: server restart) - under development |\r\n            Paused - the process was paused  - under development
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array("InProgress", "Cancelled", "Finished", "Error", "Interrupted", "Paused", "Cancelling");
        if (!in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'InProgress', 'Cancelled', 'Finished', 'Error', 'Interrupted', 'Paused', 'Cancelling'");
        }
        $this->status = $status;
        return $this;
    }
    
    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }
  
    /**
     * Sets type
     * @param string $type Type of the process
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array("ClassifierPrepare", "PrcPrepare", "ClassifierExportDictionaries", "PrcExportDictionaries", "TagsExportWords", "ClassifierActivate", "PrcActivate", "PrcIndex", "PrcIndexPartial");
        if (!in_array($type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'ClassifierPrepare', 'PrcPrepare', 'ClassifierExportDictionaries', 'PrcExportDictionaries', 'TagsExportWords', 'ClassifierActivate', 'PrcActivate', 'PrcIndex', 'PrcIndexPartial'");
        }
        $this->type = $type;
        return $this;
    }
    
    /**
     * Gets error_messages
     * @return string[]
     */
    public function getErrorMessages()
    {
        return $this->error_messages;
    }
  
    /**
     * Sets error_messages
     * @param string[] $error_messages 
     * @return $this
     */
    public function setErrorMessages($error_messages)
    {
        
        $this->error_messages = $error_messages;
        return $this;
    }
    
    /**
     * Gets result_message
     * @return string
     */
    public function getResultMessage()
    {
        return $this->result_message;
    }
  
    /**
     * Sets result_message
     * @param string $result_message 
     * @return $this
     */
    public function setResultMessage($result_message)
    {
        
        $this->result_message = $result_message;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


